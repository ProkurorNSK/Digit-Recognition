type: edu
custom_name: stage4
files:
- name: src/recognition/Main.java
  visible: true
  text: |
    package recognition;
    import java.util.*;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/DigitRecognitionTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import recognition.Main;

    import java.util.*;
    import java.util.List;
    import java.util.stream.Collectors;

    class Clue {
        String answer;
        Clue(int ans) {
            answer = Integer.toString(ans);
        }
    }

    public class DigitRecognitionTest extends StageTest<Clue> {
        public DigitRecognitionTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setAttach(new Clue(1))
                    .setInput(
                        "2\n_X_\n" +
                            "_X_\n" +
                            "XX_\n" +
                            "XX_\n" +
                            "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(2))
                    .setInput(
                        "2\nXX_\n" +
                            "__X\n" +
                            "__X\n" +
                            "X__\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(7))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "__X\n" +
                            "__X\n" +
                            "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(9))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(0))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "X_X\n" +
                            "X_X\n" +
                            "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(3))
                    .setInput(
                        "2\nXXX\n" +
                            "__X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(4))
                    .setInput(
                        "2\nX_X\n" +
                            "__X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(5))
                    .setInput(
                        "2\nXXX\n" +
                            "X__\n" +
                            "XXX\n" +
                            "__X\n" +
                            "XX_\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(8))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "XXX\n" +
                            "X_X\n" +
                            "XX_\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(6))
                    .setInput(
                        "2\n_XX\n" +
                            "X__\n" +
                            "XXX\n" +
                            "X_X\n" +
                            "XXX\n"),




                new TestCase<Clue>()
                    .setAttach(new Clue(0))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "X_X\n" +
                            "X_X\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(1))
                    .setInput(
                        "2\n_X_\n" +
                            "_X_\n" +
                            "_X_\n" +
                            "_X_\n" +
                            "_X_\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(2))
                    .setInput(
                        "2\nXXX\n" +
                            "__X\n" +
                            "XXX\n" +
                            "X__\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(3))
                    .setInput(
                        "2\nXXX\n" +
                            "__X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(4))
                    .setInput(
                        "2\nX_X\n" +
                            "X_X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(5))
                    .setInput(
                        "2\nXXX\n" +
                            "X__\n" +
                            "XXX\n" +
                            "__X\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(6))
                    .setInput(
                        "2\nXXX\n" +
                            "X__\n" +
                            "XXX\n" +
                            "X_X\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(7))
                    .setInput(
                        "2\nXXX\n" +
                            "__X\n" +
                            "__X\n" +
                            "__X\n" +
                            "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(8))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "XXX\n" +
                            "X_X\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(9))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "XXX\n")

            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            List<String> lines = reply.lines().collect(Collectors.toList());
            String lastLine = lines.get(lines.size() - 1);

            String[] lastLineWords = lastLine.split("\\s+");

            List<String> foundedNumbers = new ArrayList<>();
            for (String word : lastLineWords) {
                if (word.matches("[0-9]+")) {
                    foundedNumbers.add(word);
                }
            }

            if (foundedNumbers.size() > 1) {
                String numbers = String.join(", ", foundedNumbers);
                return new CheckResult(false,
                    "Last line contains several numbers, " +
                        "you should output only one number.\n" +
                        "Numbers found: " + numbers);
            }

            if (foundedNumbers.size() == 0) {
                return new CheckResult(false,
                    "Last line in output " +
                        "doesn't contain any numbers.");
            }

            String founded = foundedNumbers.get(0);

            if (!founded.equals(clue.answer)) {
                return new CheckResult(false,
                    "Last line contains number " + founded + " " +
                        "but expected to contain number " + clue.answer);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: weights.neo
  visible: true
  text: "¬н\0\x05sr\0\x13recognition.Weights\0\0\0\0\0\0\0\x02\x02\0\x02[\0\x01bt\0\
    \x03[[D[\0\x01wq\0~\0\x01xpur\0\x03[[DЗ­\vяdgяE\x02\0\0xp\0\0\0\nur\0\x02[D>¦Њ\
    \x14«cZ\x1e\x02\0\0xp\0\0\0\x01їр\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x01@\x18\0\0\0\0\
    \0\0uq\0~\0\x05\0\0\0\x01?р\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x01\0\0\0\0\0\0\0\0uq\0\
    ~\0\x05\0\0\0\x01@\0\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x01\0\0\0\0\0\0\0\0uq\0~\0\x05\
    \0\0\0\x01їр\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x01@\b\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x01\
    А\0\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x01їр\0\0\0\0\0\0uq\0~\0\x03\0\0\0\nuq\0~\0\x05\
    \0\0\0\x0f?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\
    \0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\
    \0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0uq\0~\0\x05\0\0\
    \0\x0fїр\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0їр\
    \0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\
    \0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x0f\
    ?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\
    \0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\
    \0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x0f?р\0\
    \0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\
    \0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\
    \0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x0f?р\0\0\0\
    \0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0?р\
    \0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\
    \0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x0f?р\0\0\0\0\0\
    \0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\
    \0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0\
    ?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x0f?р\0\0\0\0\0\0\
    ?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\
    \0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0?р\
    \0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x0f?р\0\0\0\0\0\0?р\0\
    \0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\
    \0їр\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\
    \0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x0f?р\0\0\0\0\0\0?р\0\0\0\
    \0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\
    \0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\
    \0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0uq\0~\0\x05\0\0\0\x0f?р\0\0\0\0\0\0?р\0\0\0\0\0\
    \0?р\0\0\0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\
    \0\0\0\0?р\0\0\0\0\0\0їр\0\0\0\0\0\0їр\0\0\0\0\0\0?р\0\0\0\0\0\0?р\0\0\0\0\0\0\
    ?р\0\0\0\0\0\0?р\0\0\0\0\0\0"
  learner_created: true
feedback_link: https://hyperskill.org/projects/51/stages/280/implement
status: Unchecked
record: -1
